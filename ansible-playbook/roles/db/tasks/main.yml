---
- name: Debug OS facts
  debug:
    var: ansible_facts['os_family']
  tags: debug

- name: Debug db role
  ansible.builtin.debug:
    msg: "Applying db role on {{ inventory_hostname }}"

- name: Gather facts for network configuration
  ansible.builtin.setup:
    filter: ansible_os_family

- name: Set network_config_path
  ansible.builtin.set_fact:
    network_config_path: /etc/systemd/network/

- name: Debug network variables
  ansible.builtin.debug:
    msg: |
      network_config_path: {{ network_config_path | default('undefined') }}
      lan_interface: {{ lan_interface | default('undefined') }}
      wan_interface: {{ wan_interface | default('undefined') }}
      ansible_os_family: {{ ansible_os_family | default('undefined') }}
      network_ips.db: {{ network_ips.db | default('undefined') }}

- name: Configure LAN interface for systemd-networkd
  ansible.builtin.template:
    src: network_interface.network.j2
    dest: "{{ network_config_path }}/20-lan-{{ lan_interface }}.network"
    mode: '0644'
  notify: Restart systemd-networkd
  vars:
    interface_name: "{{ lan_interface }}"
    ip_address: "{{ network_ips.db }}"
    netmask: "255.255.255.0"
    state: up

- name: Remove broken ArangoDB repository if exists
  file:
    path: /etc/apt/sources.list.d/arangodb.list
    state: absent
  become: true

- name: Install Docker on Alt Linux
  package:
    name: docker-engine
    state: present
  when: ansible_facts['os_family'] == 'Altlinux'
  notify: Restart docker

- name: Install Docker on Astra Linux (Debian-based)
  apt:
    name: docker.io
    state: present
    update_cache: yes
  when: ansible_facts['os_family'] == 'Astra Linux (Orel)'
  notify: Restart docker

- name: Remove conflicting podman-docker package
  dnf:
    name: podman-docker
    state: absent
  when: ansible_facts['os_family'] == 'RED'

- name: Install Docker on Red OS (RedHat-based)
  dnf:
    name: 
      - docker-ce 
      - docker-ce-cli 
#      - containerd.io
    state: present
    update_cache: yes
  when: ansible_facts['os_family'] == 'RED'
  notify: Restart docker

- name: Determine docker service name
  set_fact:
    docker_service_name: "{{ 'docker-engine' if ansible_facts['distribution'] == 'Alt Linux' else 'docker' }}"

- name: Restart docker
  service:
    name: docker
    state: restarted
    enabled: yes

- name: Start and enable Docker
  systemd:
    name: "{{ docker_service_name }}"
    enabled: true
    state: started

- name: Verify docker service is running
  systemd:
    name: "{{ docker_service_name }}"
    state: started
  register: docker_status
  until: docker_status is succeeded
  retries: 5
  delay: 5

- name: Ensure Docker SDK for Python is installed
  become: true
  ansible.builtin.pip:
    name: docker
    executable: pip3

- name: Ensure Docker is started
  become: true
  ansible.builtin.service:
    name: docker
    state: started
    enabled: true

- name: Add current user to docker group
  become: true
  ansible.builtin.user:
    name: "{{ ansible_user_id }}"
    groups: docker
    append: yes
  when: ansible_user_id != 'root'

- name: Run ArangoDB container
  become: true
  community.docker.docker_container:
    name: arangodb
    image: arangodb/arangodb:3.8.7
    state: started
    restart_policy: unless-stopped
    published_ports:
      - "8529:8529"
    env:
      ARANGO_ROOT_PASSWORD: "admin123"

- name: Print test curl command
  ansible.builtin.debug:
    msg: 'Чтобы проверить доступ к БД: curl -u root:admin123 http://arangodb.local:8529/_api/version'


- name: Allow TCP traffic to port 8529 from 10.0.1.3
  become: true
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    destination_port: 8529
    source: 10.0.1.3
    jump: ACCEPT
    state: present

- name: Drop TCP traffic to port 8529 from other sources
  become: true
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    destination_port: 8529
    jump: DROP
    state: present

- name: Drop TCP traffic to port 8529 in DOCKER-USER chain from sources other than 10.0.1.3
  become: true
  ansible.builtin.iptables:
    chain: DOCKER-USER
    protocol: tcp
    destination_port: 8529
    source: "!10.0.1.3"
    jump: DROP
    state: present

